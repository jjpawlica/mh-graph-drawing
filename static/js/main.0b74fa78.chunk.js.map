{"version":3,"sources":["components/P5Wrapper/index.js","data/data2.js","sketches/graphs/graph.js","sketches/random.js","components/RandomGraph.js","data/data3.js","sketches/springEmbedder.js","components/SpringEmbedder.js","sketches/forceDirected.js","components/ForceDirected.js","sketches/simulatedAnnealing.js","components/SimulatedAnnealing.js","sketches/tabuSearch.js","components/TabuSearch.js","App.js","index.js"],"names":["P5Wrapper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","wrapper","React","createRef","_this$props","props","sketch","sketchValues","updateStateHandler","canvas","p5","current","redrawHandler","prevProps","_this$props2","remove","react_default","a","createElement","ref","Component","data","id","value","neighbors","Graph","nodes","generateEdges","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","node","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","neighbor","edges","some","edge","source","target","push","_iterator2","Symbol","iterator","next","done","err","return","_iterator","createAdjacencyMatrix","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_loop3","connections","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_loop4","_iterator4","adjacencyMatrix","_iterator3","toConsumableArray","p","graph","resetSketch","clear","setup","drawEdges","start","find","end","line","x","y","index","createCanvas","background","frameRate","objectSpread","random","width","height","draw","fill","noStroke","_i","length","ellipse","text","stroke","mouseIsPressed","ForceDirected","newState","callback","setState","shouldSketchReset","state","appName","className","components_P5Wrapper","arrangeGraph","g","totalForce","connected","distance","dist","log","sqrt","SpringEmbedder","temperature","b","pow","endTemperature","counter","temp","n","k","max","min","radius","radiusDelta","minRadius","coolingFactor","calculateEnergy","crossings","c","d","e","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","targetNode","right","left","top","bottom","firstEdge","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","secondEdge","p1","p2","q1","q2","t","d5","_iterator7","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","xDistance","yDistance","u","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_loop5","_iterator9","generateAlternativeSolution","r","nodesClone","JSON","parse","stringify","int","angle","TWO_PI","cos","sin","alternativeGraph","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","noFill","alternative","currentEnergy","alternativeEnergy","exp","SimulatedAnnealing","tabu","side","sideDelta","minSide","normalize","calculateFitness","m1","m2","m3","m4","i","_loop6","j","firstTarget","secondTarget","firstEdgeLength","secondEdgeLength","firstVector","dotProduct","acos","PI","difference","abs","_loop7","nodeIndex","neighborIndex","isTabu","pointX","pointY","point","neighborhood","set","tabuClone","filter","currentFitness","bestFitness","chosenNode","chosenPoint","alternativeFitness","bestAlternative","TabuSearch","App","BrowserRouter","basename","process","Link","to","Route","path","exact","component","RandomGraph","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0b74fa78.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable new-cap */\n\nimport React, { Component } from 'react';\nimport p5 from 'p5';\n\nclass P5Wrapper extends Component {\n  constructor() {\n    super();\n    this.wrapper = React.createRef();\n  }\n\n  componentDidMount() {\n    const { sketch, sketchValues, updateStateHandler } = this.props;\n    this.canvas = new p5(sketch, this.wrapper.current);\n    this.canvas.updateStateHandler = updateStateHandler;\n    if (this.canvas.redrawHandler) {\n      this.canvas.redrawHandler(sketchValues);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { sketch, sketchValues, updateStateHandler } = this.props;\n    if (sketch !== prevProps.sketch) {\n      this.canvas.remove();\n      this.canvas = new p5(sketch, this.wrapper.current);\n      this.canvas.updateStateHandler = updateStateHandler;\n    }\n    if (this.canvas.redrawHandler) {\n      this.canvas.redrawHandler(sketchValues);\n    }\n  }\n\n  componentWillUnmount() {\n    this.canvas.remove();\n  }\n\n  render() {\n    return <div ref={this.wrapper} />;\n  }\n}\n\nexport default P5Wrapper;\n","const data = [\n  {\n    id: 'a',\n    value: '10',\n    neighbors: ['b', 'g']\n  },\n  {\n    id: 'b',\n    value: '11',\n    neighbors: ['c', 'g']\n  },\n  {\n    id: 'c',\n    value: '12',\n    neighbors: ['d', 'g']\n  },\n  {\n    id: 'd',\n    value: '13',\n    neighbors: ['e', 'g']\n  },\n  {\n    id: 'e',\n    value: '14',\n    neighbors: ['f', 'g']\n  },\n  {\n    id: 'f',\n    value: '15',\n    neighbors: ['a', 'g']\n  },\n  {\n    id: 'g',\n    value: '16',\n    neighbors: ['a', 'b', 'c', 'd', 'e', 'f']\n  }\n];\n\nexport default data;\n","class Graph {\n  constructor(nodes) {\n    this.nodes = [...nodes];\n    this.edges = [];\n    this.adjacencyMatrix = [];\n  }\n\n  generateEdges = () => {\n    for (const node of this.nodes) {\n      for (const neighbor of node.neighbors) {\n        if (!this.edges.some(edge => edge.source === neighbor && edge.target === node.id)) {\n          this.edges.push({ source: node.id, target: neighbor });\n        }\n      }\n    }\n  };\n\n  createAdjacencyMatrix = () => {\n    for (const node of this.nodes) {\n      // Connections of the current node\n      const connections = [];\n      // Check all nodes\n      for (const target of this.nodes) {\n        // Check given connection is actually an edge in the graph\n        this.edges.some(\n          edge =>\n            (edge.source === node.id && edge.target === target.id) ||\n            (edge.source === target.id && edge.target === node.id)\n        )\n          ? connections.push(1)\n          : connections.push(0);\n      }\n      this.adjacencyMatrix.push(connections);\n    }\n  };\n}\n\nexport default Graph;\n","/* eslint-disable guard-for-in */\n/* eslint-disable no-param-reassign */\n\n// Title: Random Graph\n// Author: Jakub Pawlica\n\nimport data from '../data/data2';\nimport Graph from './graphs/graph';\n\nconst sketch = p => {\n  const nodes = [];\n  let graph;\n\n  const width = 600;\n  const height = 600;\n\n  p.redrawHandler = sketchValues => {\n    // ({ data } = sketchValues);\n  };\n\n  p.updateStateHandler = () => {};\n\n  p.resetSketch = () => {\n    p.clear();\n    p.setup();\n  };\n\n  p.drawEdges = () => {\n    for (const edge of graph.edges) {\n      // Find start and end node of given edge so we can their X and Y position\n      const start = nodes.find(node => node.id === edge.source);\n      const end = nodes.find(node => node.id === edge.target);\n      p.line(start.x, start.y, end.x, end.y);\n    }\n  };\n\n  p.setup = () => {\n    p.createCanvas(width, height);\n    p.background(51);\n    p.frameRate(60);\n\n    // Fill nodes array and set random position for each node\n    for (const index in data) {\n      nodes[index] = {\n        ...data[index],\n        x: p.random(width / 3, (2 * width) / 3),\n        y: p.random(height / 3, (2 * height) / 3)\n      };\n    }\n\n    // Generate new graph, it's edges and corresponding adjacency matrix\n    graph = new Graph(nodes);\n    graph.generateEdges();\n    graph.createAdjacencyMatrix();\n  };\n\n  p.draw = () => {\n    // Draw graph's nodes\n    p.background(51);\n    p.fill(255);\n    p.noStroke();\n    for (const node of nodes) {\n      p.ellipse(node.x, node.y, 16, 16);\n      p.text(node.id, node.x, node.y - 20);\n    }\n\n    // Draw graph's edges\n    p.stroke(255);\n    p.drawEdges();\n\n    // Updated state in react app\n    p.updateStateHandler({ nodes: nodes.length });\n\n    if (p.mouseIsPressed) {\n      p.resetSketch();\n    }\n  };\n};\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport P5Wrapper from './P5Wrapper';\nimport sketch from '../sketches/random';\n\nclass ForceDirected extends Component {\n  constructor() {\n    super();\n    this.state = {\n      appName: 'Random Graph',\n      shouldSketchReset: false\n    };\n  }\n\n  updateStateHandler = (newState, callback) => this.setState(newState, callback);\n\n  resetSketch = () => {\n    const { shouldSketchReset } = this.state;\n    this.setState({ shouldSketchReset: !shouldSketchReset });\n  };\n\n  render() {\n    const { appName } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>{appName}</h1>\n        <div>\n          <P5Wrapper\n            sketch={sketch}\n            sketchValues={{}}\n            updateStateHandler={this.updateStateHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ForceDirected;\n","const data = [\n  {\n    id: 'a',\n    value: '10',\n    neighbors: ['d', 'b', 'e']\n  },\n  {\n    id: 'b',\n    value: '11',\n    neighbors: ['a', 'c', 'f']\n  },\n  {\n    id: 'c',\n    value: '12',\n    neighbors: ['b', 'd', 'g']\n  },\n  {\n    id: 'd',\n    value: '13',\n    neighbors: ['a', 'c', 'h']\n  },\n  {\n    id: 'e',\n    value: '14',\n    neighbors: ['a', 'f', 'h']\n  },\n  {\n    id: 'f',\n    value: '15',\n    neighbors: ['b', 'e', 'g']\n  },\n  {\n    id: 'g',\n    value: '16',\n    neighbors: ['c', 'f', 'h']\n  },\n  {\n    id: 'h',\n    value: '16',\n    neighbors: ['d', 'e', 'g']\n  }\n];\n\nexport default data;\n","/* eslint-disable guard-for-in */\n/* eslint-disable no-param-reassign */\n\n// Title: Spring Embedder\n// Author: Jakub Pawlica\n// Based on: Eades, P. (1984), 'A heuristic for graph drawing', Congressus Numerantium 42 , 149-160.\n\nimport data from '../data/data3';\nimport Graph from './graphs/graph';\n\nconst sketch = p => {\n  const nodes = [];\n  let graph;\n\n  const width = 600;\n  const height = 600;\n\n  // Original values do not produce pleasing results in this case\n  const c1 = 1; // Attraction force constant - original value = 2\n  const c2 = 100; // Optimal edge length - original value = 1\n  const c3 = 1; // Repelent force constant - original value = 1\n  const c4 = 10; // Rate of change - original value =0.01\n  const m = 1000; // Number of iterations - original value = 500\n\n  let counter = 0;\n\n  p.redrawHandler = sketchValues => {\n    // ({ data } = sketchValues);\n  };\n\n  p.updateStateHandler = () => {};\n\n  p.resetSketch = () => {\n    p.clear();\n    p.setup();\n  };\n\n  p.drawEdges = () => {\n    for (const edge of graph.edges) {\n      // Find start and end node of given edge so we can their X and Y position\n      const start = nodes.find(node => node.id === edge.source);\n      const end = nodes.find(node => node.id === edge.target);\n      p.line(start.x, start.y, end.x, end.y);\n    }\n  };\n\n  p.arrangeGraph = g => {\n    for (const node of g.nodes) {\n      const totalForce = { x: 0, y: 0 };\n      for (const target of g.nodes) {\n        // Check if two nodes are adjacent\n        const connected = g.edges.some(\n          edge =>\n            (edge.source === node.id && edge.target === target.id) ||\n            (edge.source === target.id && edge.target === node.id)\n        );\n        // Compute distance between given node and target note\n        const distance = p.dist(node.x, node.y, target.x, target.y);\n        // Distance must be greater then 0 else calculations have no result\n        if (distance > 0) {\n          // Calculated unit vector coordinates for given node and target node\n          const x = (target.x - node.x) / distance;\n          const y = (target.y - node.y) / distance;\n          // Apply  Eades' formula for attraction force to unit vector if edges are connected\n          if (connected) {\n            totalForce.x += c1 * p.log(distance / c2) * x;\n            totalForce.y += c1 * p.log(distance / c2) * y;\n          }\n          // Apply Eades' formula for repulsive force for inverse unit vector\n          else {\n            totalForce.x += (c3 / p.sqrt(distance)) * -x;\n            totalForce.y += (c3 / p.sqrt(distance)) * -y;\n          }\n        }\n      }\n      // Move given node by total force working on it multiplied by constant C4\n      node.x += c4 * totalForce.x;\n      node.y += c4 * totalForce.y;\n    }\n  };\n\n  p.setup = () => {\n    p.createCanvas(width, height);\n    p.background(51);\n    p.frameRate(60);\n\n    // Fill nodes array and set random position for each node\n    for (const index in data) {\n      nodes[index] = {\n        ...data[index],\n        x: p.random(width / 3, (2 * width) / 3),\n        y: p.random(height / 3, (2 * height) / 3)\n      };\n    }\n\n    // Generate new graph, it's edges and corresponding adjacency matrix\n    graph = new Graph(nodes);\n    graph.generateEdges();\n    graph.createAdjacencyMatrix();\n  };\n\n  p.draw = () => {\n    // Draw graph's nodes\n    p.background(51);\n    p.noStroke();\n    p.fill(255);\n    for (const node of nodes) {\n      p.ellipse(node.x, node.y, 16, 16);\n      p.text(node.id, node.x, node.y - 20);\n    }\n\n    // Draw graph's edges\n    p.stroke(255);\n    p.drawEdges();\n\n    // On each draw loop update graph\n    p.arrangeGraph(graph);\n\n    // Updated iteration counter\n    counter += 1;\n\n    // Updated state in react app\n    p.updateStateHandler({ nodes: nodes.length });\n\n    if (p.mouseIsPressed) {\n      p.resetSketch();\n      counter = 0;\n    }\n  };\n};\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport P5Wrapper from './P5Wrapper';\nimport sketch from '../sketches/springEmbedder';\n\nclass SpringEmbedder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      appName: 'Spring Embedder',\n      shouldSketchReset: false\n    };\n  }\n\n  updateStateHandler = (newState, callback) => this.setState(newState, callback);\n\n  resetSketch = () => {\n    const { shouldSketchReset } = this.state;\n    this.setState({ shouldSketchReset: !shouldSketchReset });\n  };\n\n  render() {\n    const { appName } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>{appName}</h1>\n        <div>\n          <P5Wrapper\n            sketch={sketch}\n            sketchValues={{}}\n            updateStateHandler={this.updateStateHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SpringEmbedder;\n","/* eslint-disable guard-for-in */\n/* eslint-disable no-param-reassign */\n\n// Title: Force Directed\n// Author: Jakub Pawlica\n// Based on: Fruchterman, T. M. J. & Reingold, E. M. (1991), 'Graph Drawing by Force-directed Placement', Software - Practice and Experience 21 (11), 1129-1164.\n// TODO: Add Inertia and Gravitation\nimport data from '../data/data3';\nimport Graph from './graphs/graph';\n\nconst sketch = p => {\n  const nodes = [];\n  let graph;\n\n  const width = 600;\n  const height = 600;\n  const area = width * height;\n\n  // Original values do not produce pleasing results in this case\n  const c = 0.5; // Force constant C - good results with value = 0.5, 1\n\n  // Start and end temperature for cooling process\n  const startTemperature = 0.1;\n  const endTemperature = 0.0001;\n\n  let temperature = startTemperature;\n\n  const m = 500; // Maximum iterations\n  const b = p.pow(endTemperature / startTemperature, 1 / m); // Cooling factor - original value not provided\n\n  let counter = 0;\n\n  p.redrawHandler = sketchValues => {\n    // ({ data } = sketchValues);\n  };\n\n  p.updateStateHandler = () => {};\n\n  p.resetSketch = () => {\n    p.clear();\n    p.setup();\n  };\n\n  p.drawEdges = () => {\n    for (const edge of graph.edges) {\n      // Find start and end node of given edge so we can their X and Y position\n      const start = nodes.find(node => node.id === edge.source);\n      const end = nodes.find(node => node.id === edge.target);\n      p.line(start.x, start.y, end.x, end.y);\n    }\n  };\n\n  p.arrangeGraph = (g, temp) => {\n    const n = g.nodes.length; // Number of vertices\n    const k = c * p.sqrt(area / n); // Constant K needed for further calculations\n    for (const node of g.nodes) {\n      const totalForce = { x: 0, y: 0 };\n      for (const target of g.nodes) {\n        // Check if two nodes are adjacent\n        const connected = g.edges.some(\n          edge =>\n            (edge.source === node.id && edge.target === target.id) ||\n            (edge.source === target.id && edge.target === node.id)\n        );\n        // Compute distance between given node and target note\n        const distance = p.dist(node.x, node.y, target.x, target.y);\n        // Distance must be greater then 0 else calculations have no result\n        if (distance > 0) {\n          // Calculated unit vector coordinates for given node and target node\n          const x = (target.x - node.x) / distance;\n          const y = (target.y - node.y) / distance;\n          // Apply Fruchterman Reingold formula for repulsive force for inverse unit vector\n          if (connected) {\n            totalForce.x += ((distance * distance) / k) * x;\n            totalForce.y += ((distance * distance) / k) * y;\n            totalForce.x += ((k * k) / distance) * -x;\n            totalForce.y += ((k * k) / distance) * -y;\n            // Apply Fruchterman Reingold formula for repulsive force for inverse unit vector\n          } else {\n            totalForce.x += ((k * k) / distance) * -x;\n            totalForce.y += ((k * k) / distance) * -y;\n          }\n        }\n      }\n      // Update position of given node by total force times constant\n      node.x += temperature * totalForce.x;\n      node.y += temperature * totalForce.y;\n      // Clamp graph position to canvas area\n      node.x = p.max(0, p.min(width, node.x));\n      node.y = p.max(0, p.min(height, node.y));\n    }\n  };\n\n  p.setup = () => {\n    p.createCanvas(600, 600);\n    p.background(51);\n    p.frameRate(60);\n    // Fill nodes array and set random position for each node\n    for (const index in data) {\n      nodes[index] = {\n        ...data[index],\n        x: p.random(width / 3, (2 * width) / 3),\n        y: p.random(height / 3, (2 * height) / 3)\n      };\n    }\n\n    // Generate new graph, it's edges and corresponding adjacency matrix\n    graph = new Graph(nodes);\n    graph.generateEdges();\n    graph.createAdjacencyMatrix();\n  };\n\n  p.draw = () => {\n    // Draw graph's nodes\n    p.background(51);\n    p.noStroke();\n    p.fill(255);\n    for (const node of nodes) {\n      p.ellipse(node.x, node.y, 16, 16);\n      p.text(node.id, node.x, node.y - 20);\n    }\n\n    // Draw graph's edges\n    p.stroke(255);\n    p.drawEdges();\n\n    // On each draw loop update graph\n    if (counter < m) {\n      p.arrangeGraph(graph, temperature);\n    }\n    // Updated iteration counter and temperature\n    temperature *= b;\n    counter += 1;\n\n    // Updated state in react app\n    p.updateStateHandler({ nodes: nodes.length });\n\n    if (p.mouseIsPressed) {\n      p.resetSketch();\n      counter = 0;\n      temperature = startTemperature;\n    }\n  };\n};\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport P5Wrapper from './P5Wrapper';\nimport sketch from '../sketches/forceDirected';\n\nclass ForceDirected extends Component {\n  constructor() {\n    super();\n    this.state = {\n      appName: 'Force Directed',\n      shouldSketchReset: false\n    };\n  }\n\n  updateStateHandler = (newState, callback) => this.setState(newState, callback);\n\n  resetSketch = () => {\n    const { shouldSketchReset } = this.state;\n    this.setState({ shouldSketchReset: !shouldSketchReset });\n  };\n\n  render() {\n    const { appName } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>{appName}</h1>\n        <div>\n          <P5Wrapper\n            sketch={sketch}\n            sketchValues={{}}\n            updateStateHandler={this.updateStateHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ForceDirected;\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable guard-for-in */\n/* eslint-disable no-param-reassign */\n\n// Title: Simulated Annealing\n// Author: Jakub Pawlica\n// Based on: Davidson, R. & Harel, D. (1996), 'Drawing Graphs Nicely Using Simulated Annealing.', ACM Trans. Graph. 15 (4), 301-331.\n// TODO: Review calculations, better neighborhood function\n\nimport data from '../data/data3';\nimport Graph from './graphs/graph';\n\nconst sketch = p => {\n  const nodes = [];\n  let graph;\n\n  const width = 600;\n  const height = 600;\n\n  // Original values do not produce pleasing results in this case\n  const d1 = 100; // Node distribution weight\n  const d2 = 100; // // Borderlines  weight\n  const d3 = 0.00001; // Edge length weight\n  const minDistance = 100; //\n  const d5 = 1; // Node-edge distance weight\n  const d4 = d5 / (minDistance * minDistance); // Edge crossing weight\n\n  const m = 2000; // Iterations\n\n  const maxRadius = 25;\n  const minRadius = 1;\n\n  let radius = maxRadius;\n\n  const radiusDelta = p.pow(minRadius / maxRadius, 1 / m); // Radius delta\n\n  const startTemperature = 0.1;\n  const endTemperature = 0.0001;\n\n  let temperature = startTemperature;\n\n  const coolingFactor = p.pow(endTemperature / startTemperature, 1 / m); // Cooling factor def. 0.75\n\n  let counter = 0;\n\n  p.redrawHandler = sketchValues => {\n    // ({ data } = sketchValues);\n  };\n\n  p.updateStateHandler = () => {};\n\n  p.resetSketch = () => {\n    p.clear();\n    p.setup();\n  };\n\n  p.calculateEnergy = g => {\n    let totalEnergy = 0;\n    let crossings = 0;\n\n    // Criteria values contributions to total energy function\n    let a = 0; // Node distribution factor\n    let b = 0; // Borderlines factor\n    let c = 0; // Edge length factor\n    let d = 0; // Edge crossing factor\n    let e = 0;\n\n    // Calculate node distribution factor\n    for (const node of g.nodes) {\n      for (const targetNode of g.nodes) {\n        // Compute distance between given node and target note\n        const distance = p.dist(node.x, node.y, targetNode.x, targetNode.y);\n        if (distance > 0) {\n          a += d1 / (distance * distance);\n        }\n      }\n    }\n    // Calculate borderlines factor (distance from frame's edges)\n    for (const node of g.nodes) {\n      const right = node.x;\n      const left = width - node.x;\n      const top = node.y;\n      const bottom = height - node.y;\n      if (right > 0 && left > 0 && top > 0 && bottom > 0) {\n        b +=\n          d2 * (1 / (right * right) + 1 / (left * left) + 1 / (top * top) + 1 / (bottom * bottom));\n      }\n    }\n\n    // Calculate edge length factor\n    for (const edge of g.edges) {\n      const start = g.nodes.find(node => node.id === edge.source);\n      const end = g.nodes.find(node => node.id === edge.target);\n      const distance = p.dist(start.x, start.y, end.x, end.y);\n      c += d3 * distance * distance;\n    }\n\n    // Calculate edge crossing factor\n    for (const firstEdge of g.edges) {\n      for (const secondEdge of g.edges) {\n        const p1 = g.nodes.find(n => n.id === firstEdge.source);\n        const p2 = g.nodes.find(n => n.id === firstEdge.target);\n        const q1 = g.nodes.find(n => n.id === secondEdge.source);\n        const q2 = g.nodes.find(n => n.id === secondEdge.target);\n        if (p1.id !== q1.id && p1.id !== q2.id && p2.id !== q1.id && p2.id !== q2.id) {\n          const t =\n            ((p2.y - p1.y) * (q1.x - p1.x) - (p2.x - p1.x) * (q1.y - p1.y)) *\n            ((p2.y - p1.y) * (q2.x - p1.x) - (p2.x - p1.x) * (q2.y - p1.y));\n          const u =\n            ((q2.y - q1.y) * (p1.x - q1.x) - (q2.x - q1.x) * (p1.y - q1.y)) *\n            ((q2.y - q1.y) * (p2.x - q1.x) - (q2.x - q1.x) * (p2.y - q1.y));\n          if (u <= 0 && t <= 0) crossings += 1;\n          d = d4 * crossings;\n        }\n      }\n    }\n\n    // Calculate node-edge distance\n    for (const node of g.nodes) {\n      for (const edge of g.edges) {\n        let x = 0;\n        let y = 0;\n        const start = g.nodes.find(n => n.id === edge.source);\n        const end = g.nodes.find(n => n.id === edge.target);\n        if (node.id !== start.id && node.id !== end.id) {\n          const xDistance = end.x - start.x;\n          const yDistance = end.y - start.y;\n          const u =\n            (a * (node.x - start.x) + b * (node.y - start.y)) /\n            (xDistance * xDistance + yDistance * yDistance);\n          if (u <= 0) {\n            x = start.x;\n            y = start.y;\n          } else if (u >= 1) {\n            x = end.x;\n            y = end.y;\n          } else {\n            x = start.x + u * xDistance;\n            y = start.y + u * yDistance;\n          }\n          const distance = p.dist(node.x, node.y, x, y);\n          e += d5 / (distance * distance);\n        }\n      }\n    }\n\n    // Sum total energy\n    totalEnergy = a + b + c + d + e;\n    return totalEnergy;\n  };\n\n  p.drawEdges = g => {\n    for (const edge of g.edges) {\n      // Find start and end node of given edge so we can their X and Y position\n      const start = g.nodes.find(node => node.id === edge.source);\n      const end = g.nodes.find(node => node.id === edge.target);\n      p.line(start.x, start.y, end.x, end.y);\n    }\n  };\n\n  p.generateAlternativeSolution = (g, r) => {\n    // Create copy of the current nodes (deep clone)\n    const nodesClone = JSON.parse(JSON.stringify(g.nodes));\n    // Pick random node of the graph\n    const n = p.int(p.random(0, nodesClone.length));\n    // Choose random point on the edge of node's neighborhood with radius r\n    const angle = p.random() * p.TWO_PI;\n    nodesClone[n].x += p.cos(angle) * r;\n    nodesClone[n].y += p.sin(angle) * r;\n\n    // Clamp node position to canvas area\n    nodesClone[n].x = p.max(0, p.min(width, nodesClone[n].x));\n    nodesClone[n].y = p.max(0, p.min(height, nodesClone[n].y));\n\n    // Create new graph\n    const alternativeGraph = new Graph(nodesClone);\n    alternativeGraph.generateEdges();\n    alternativeGraph.createAdjacencyMatrix();\n\n    return alternativeGraph;\n  };\n\n  p.setup = () => {\n    p.createCanvas(width, height);\n    p.background(51);\n    p.frameRate(60);\n\n    // Fill nodes array and set random position for each node\n    for (const index in data) {\n      nodes[index] = {\n        ...data[index],\n        x: p.random(200, 400),\n        y: p.random(200, 400)\n      };\n    }\n\n    // Generate new graph, it's edges and corresponding adjacency matrix\n    graph = new Graph(nodes);\n    graph.generateEdges();\n    graph.createAdjacencyMatrix();\n  };\n\n  p.draw = () => {\n    // Draw graph's nodes\n    p.background(51);\n    p.noStroke();\n    p.fill(255);\n    for (const node of graph.nodes) {\n      p.ellipse(node.x, node.y, 16, 16);\n      p.text(node.id, node.x, node.y - 20);\n    }\n\n    // Draw graph's edges\n    p.stroke(255);\n    p.drawEdges(graph);\n\n    for (const node of graph.nodes) {\n      p.noFill();\n      p.stroke(255, 0, 0);\n      p.ellipse(node.x, node.y, radius, radius);\n    }\n\n    if (counter < m) {\n      // Generate alternative graph layout\n      const alternative = p.generateAlternativeSolution(graph, radius);\n\n      // Calculated fitness function for currnet best graph and alternative solution\n      const currentEnergy = p.calculateEnergy(graph);\n      const alternativeEnergy = p.calculateEnergy(alternative);\n\n      // Check if alternative layout should become current layout (Boltzmann distribution)\n      if (p.random() < p.exp((currentEnergy - alternativeEnergy) / temperature)) {\n        // Switch current layout to alternative layout\n        graph = alternative;\n        // Updated temperature and radius of the neighborhood\n        temperature *= coolingFactor;\n        radius *= radiusDelta;\n      }\n    }\n    // Updated iteration counter\n    counter += 1;\n\n    // Updated state in react app\n    p.updateStateHandler({ nodes: graph.nodes.length });\n\n    // Stop loop when maximum iterations reached\n    if (p.mouseIsPressed) {\n      p.resetSketch();\n      counter = 0;\n      radius = maxRadius;\n      temperature = startTemperature;\n    }\n  };\n};\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport P5Wrapper from './P5Wrapper';\nimport sketch from '../sketches/simulatedAnnealing';\n\nclass SimulatedAnnealing extends Component {\n  constructor() {\n    super();\n    this.state = {\n      appName: 'Simulated Annealing',\n      shouldSketchReset: false\n    };\n  }\n\n  updateStateHandler = (newState, callback) => this.setState(newState, callback);\n\n  resetSketch = () => {\n    const { shouldSketchReset } = this.state;\n    this.setState({ shouldSketchReset: !shouldSketchReset });\n  };\n\n  render() {\n    const { appName } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>{appName}</h1>\n        <div>\n          <P5Wrapper\n            sketch={sketch}\n            sketchValues={{}}\n            updateStateHandler={this.updateStateHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SimulatedAnnealing;\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable guard-for-in */\n/* eslint-disable no-param-reassign */\n\n// Title: Tabu Search\n// Author: Jakub Pawlica\n// Based on: Dib, F. K. & Rodgers, P. (2014), A Tabu Search Based Approach for Graph Layout., in Erland Jungert, ed., 'DMS' , Knowledge Systems Institute Graduate School, , pp. 283-291.\n\nimport data from '../data/data3';\nimport Graph from './graphs/graph';\n\nconst sketch = p => {\n  const nodes = [];\n  let tabu = [];\n  let graph;\n\n  const width = 600;\n  const height = 600;\n\n  // Original values do not produce pleasing results in this case\n  const w1 = 1; // Node distribution weight\n  const w2 = 0.0000001; // Edge length weight\n  const w3 = 10; // Edge crossing weigh\n  const w4 = 0; // Angular resolution weight\n\n  const m = 1000; // Iterations\n\n  const maxSide = 100;\n  const minSide = 2;\n\n  let side = maxSide;\n\n  const sideDelta = p.pow(minSide / maxSide, 1 / m); // Radius delta\n\n  const tabuCutoff = 0.9;\n  const tabuDuration = 7;\n\n  let counter = 0;\n\n  p.redrawHandler = sketchValues => {\n    // ({ data } = sketchValues);\n  };\n\n  p.updateStateHandler = () => {};\n\n  p.resetSketch = () => {\n    p.clear();\n    p.setup();\n  };\n\n  p.normalize = x => 2 * (1 / (1 + p.exp(-x))) - 1;\n\n  p.calculateFitness = g => {\n    let totalFitness = 0;\n    let crossings = 0;\n\n    // Criteria values contributions to total energy function\n    let m1 = 0; // Node distribution factor\n    let m2 = 0; // Edge length factor\n    let m3 = 0; // Edge crossing factor\n    let m4 = 0; // Angular resolution factor\n\n    // Calculate node distribution factor\n    for (const node of g.nodes) {\n      for (const targetNode of g.nodes) {\n        // Compute distance between given node and target note\n        const distance = p.dist(node.x, node.y, targetNode.x, targetNode.y);\n        if (distance > 0) {\n          m1 += w1 / (distance * distance);\n        }\n      }\n    }\n\n    // Calculate edge length factor\n    for (const edge of g.edges) {\n      const start = g.nodes.find(node => node.id === edge.source);\n      const end = g.nodes.find(node => node.id === edge.target);\n      const distance = p.dist(start.x, start.y, end.x, end.y);\n      m2 += w2 * distance * distance;\n    }\n\n    // Calculate edge crossing factor\n    for (const firstEdge of g.edges) {\n      for (const secondEdge of g.edges) {\n        const p1 = g.nodes.find(n => n.id === firstEdge.source);\n        const p2 = g.nodes.find(n => n.id === firstEdge.target);\n        const q1 = g.nodes.find(n => n.id === secondEdge.source);\n        const q2 = g.nodes.find(n => n.id === secondEdge.target);\n        if (p1.id !== q1.id && p1.id !== q2.id && p2.id !== q1.id && p2.id !== q2.id) {\n          const t =\n            ((p2.y - p1.y) * (q1.x - p1.x) - (p2.x - p1.x) * (q1.y - p1.y)) *\n            ((p2.y - p1.y) * (q2.x - p1.x) - (p2.x - p1.x) * (q2.y - p1.y));\n          const u =\n            ((q2.y - q1.y) * (p1.x - q1.x) - (q2.x - q1.x) * (p1.y - q1.y)) *\n            ((q2.y - q1.y) * (p2.x - q1.x) - (q2.x - q1.x) * (p2.y - q1.y));\n          if (u <= 0 && t <= 0) crossings += 1;\n          m3 = w3 * crossings;\n        }\n      }\n    }\n\n    // Calculate angular resolution factor\n    for (const node of g.nodes) {\n      // Check if node has more then one connection\n      if (node.neighbors.length > 1) {\n        // Get angle between each unique pair of edges\n        for (let i = 0; i < node.neighbors.length - 1; i += 1) {\n          for (let j = i; j < node.neighbors.length - 1; j += 1) {\n            const firstTarget = g.nodes.find(n => n.id === node.neighbors[i]);\n            const secondTarget = g.nodes.find(n => n.id === node.neighbors[j + 1]);\n\n            // Edges length\n            const firstEdgeLength = p.dist(node.x, node.y, firstTarget.x, firstTarget.y);\n            const secondEdgeLength = p.dist(node.x, node.y, secondTarget.x, secondTarget.y);\n\n            // Vectors representing edges\n            const firstVector = { x: firstTarget.x - node.x, y: firstTarget.y - node.y };\n            const secondVector = { x: secondTarget.x - node.x, y: secondTarget.y - node.y };\n\n            // Dot product between vectors\n            const dotProduct = firstVector.x * secondVector.x + firstVector.y * secondVector.y;\n\n            const angle = 100 * (p.acos(dotProduct / (firstEdgeLength * secondEdgeLength)) / p.PI);\n            const difference = p.abs(360 / node.neighbors.length - angle);\n\n            // For pair and it's reverse increase angular resolution factor\n            m4 += 2 * difference;\n          }\n        }\n      }\n    }\n    // Sum total energy\n    // totalFitness = p.normalize(m1) + p.normalize(m2) + p.normalize(m3) + p.normalize(w4 * m4);\n    totalFitness = m1 + m2 + m3 + w4 * m4;\n\n    // console.log(\n    //   p.normalize(m1),\n    //   p.normalize(m2),\n    //   p.normalize(m3),\n    //   p.normalize(w4 * m4),\n    //   totalFitness\n    // );\n    return totalFitness;\n  };\n\n  p.drawEdges = g => {\n    for (const edge of g.edges) {\n      // Find start and end node of given edge so we can their X and Y position\n      const start = g.nodes.find(node => node.id === edge.source);\n      const end = g.nodes.find(node => node.id === edge.target);\n      p.line(start.x, start.y, end.x, end.y);\n    }\n  };\n\n  p.generateAlternativeSolution = (g, n, nodeIndex, neighborIndex) => {\n    // Create copy of the current nodes (deep clone)\n    const nodesClone = JSON.parse(JSON.stringify(g.nodes));\n    nodesClone[nodeIndex].x = n[nodeIndex][neighborIndex][0];\n    nodesClone[nodeIndex].y = n[nodeIndex][neighborIndex][1];\n\n    // Create new graph\n    const alternativeGraph = new Graph(nodesClone);\n    alternativeGraph.generateEdges();\n    alternativeGraph.createAdjacencyMatrix();\n\n    return alternativeGraph;\n  };\n\n  p.isTabu = (pointX, pointY) => tabu.some(point => point[0] === pointX && point[1] === pointY);\n\n  p.setup = () => {\n    p.createCanvas(width, height);\n    p.background(51);\n    p.frameRate(60);\n\n    // Fill nodes array and set random position for each node\n    for (const index in data) {\n      nodes[index] = {\n        ...data[index],\n        x: p.random(0, 600),\n        y: p.random(0, 600)\n      };\n    }\n\n    // Generate new graph, it's edges and corresponding adjacency matrix\n    graph = new Graph(nodes);\n    graph.generateEdges();\n    graph.createAdjacencyMatrix();\n  };\n\n  p.draw = () => {\n    // Draw graph's nodes\n    p.background(51);\n    p.noStroke();\n    p.fill(255);\n    for (const node of graph.nodes) {\n      p.ellipse(node.x, node.y, 16, 16);\n      p.text(node.id, node.x, node.y - 20);\n    }\n\n    // Draw graph's edges\n    p.stroke(255);\n    p.drawEdges(graph);\n\n    if (counter < m) {\n      // Generate neighborhood\n      const neighborhood = [];\n\n      for (const node of graph.nodes) {\n        const neighbors = [];\n        if (node.x - side / 2 > 0 && node.y - side / 2 > 0) {\n          neighbors.push([node.x - side / 2, node.y - side / 2]);\n        }\n        if (node.x - side / 2 > 0) {\n          neighbors.push([node.x - side / 2, node.y]);\n        }\n        if (node.x - side / 2 > 0 && node.y + side / 2 < height) {\n          neighbors.push([node.x - side / 2, node.y + side / 2]);\n        }\n        if (node.x + side / 2 < width && node.y - side / 2 > 0) {\n          neighbors.push([node.x + side / 2, node.y - side / 2]);\n        }\n        if (node.x + side / 2 < width) {\n          neighbors.push([node.x + side / 2, node.y]);\n        }\n        if (node.x + side / 2 < width && node.y + side / 2 < height) {\n          neighbors.push([node.x + side / 2, node.y + side / 2]);\n        }\n        if (node.y - side / 2 > 0) {\n          neighbors.push([node.x, node.y - side / 2]);\n        }\n        if (node.y + side / 2 < height) {\n          neighbors.push([node.x, node.y + side / 2]);\n        }\n        neighborhood.push(neighbors);\n      }\n\n      for (const set of neighborhood) {\n        for (const point of set) {\n          p.fill(0, 255, 0);\n          p.ellipse(point[0], point[1], 4, 4);\n        }\n      }\n\n      // Decrease tabu duration for each element in tabu list\n      if (tabu.length > 0) {\n        const tabuClone = JSON.parse(JSON.stringify(tabu));\n        for (let i = 0; i < tabuClone.length; i += 1) {\n          tabuClone[i][2] -= 1;\n        }\n        tabu = tabuClone;\n      }\n\n      // // Remove points from tabu if their duration = 0\n      tabu = tabu.filter(point => point[2] > 0);\n\n      const currentFitness = p.calculateFitness(graph);\n      let bestFitness = currentFitness;\n\n      let chosenNode = 0;\n      let chosenPoint = 0;\n\n      // Check fitness function in every possible alterative solution\n      for (let i = 0; i < neighborhood.length; i += 1) {\n        for (let j = 0; j < neighborhood[i].length; j += 1) {\n          // Check if neighbor is not in tabu list\n          const isTabu = p.isTabu(neighborhood[i][j][0], neighborhood[i][j][1]);\n          if (!isTabu) {\n            // Calculated fitness function for current best graph and alternative solution\n            const alternative = p.generateAlternativeSolution(graph, neighborhood, i, j);\n            const alternativeFitness = p.calculateFitness(alternative);\n            if (alternativeFitness < bestFitness) {\n              bestFitness = alternativeFitness;\n              chosenNode = i;\n              chosenPoint = j;\n            }\n            // Add bad solutions to tabu list\n            if (currentFitness / alternativeFitness > tabuCutoff) {\n              tabu.push([neighborhood[i][j][0], neighborhood[i][j][1], tabuDuration]);\n            }\n          }\n        }\n      }\n\n      const bestAlternative = p.generateAlternativeSolution(\n        graph,\n        neighborhood,\n        chosenNode,\n        chosenPoint\n      );\n\n      tabu.push([\n        neighborhood[chosenNode][chosenPoint][0],\n        neighborhood[chosenNode][chosenPoint][1],\n        tabuDuration\n      ]);\n\n      graph = bestAlternative;\n      side *= sideDelta;\n    }\n\n    counter += 1;\n\n    // Updated state in react app\n    p.updateStateHandler({ nodes: graph.nodes.length });\n\n    if (p.mouseIsPressed) {\n      p.resetSketch();\n      counter = 0;\n      side = maxSide;\n    }\n  };\n};\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport P5Wrapper from './P5Wrapper';\nimport sketch from '../sketches/tabuSearch';\n\nclass TabuSearch extends Component {\n  constructor() {\n    super();\n    this.state = {\n      appName: 'Tabu Search',\n      shouldSketchReset: false\n    };\n  }\n\n  updateStateHandler = (newState, callback) => this.setState(newState, callback);\n\n  resetSketch = () => {\n    const { shouldSketchReset } = this.state;\n    this.setState({ shouldSketchReset: !shouldSketchReset });\n  };\n\n  render() {\n    const { appName } = this.state;\n    return (\n      <div className=\"container\">\n        <h1>{appName}</h1>\n        <div>\n          <P5Wrapper\n            sketch={sketch}\n            sketchValues={{}}\n            updateStateHandler={this.updateStateHandler}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TabuSearch;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nimport RandomGraph from './components/RandomGraph';\nimport SpringEmbedder from './components/SpringEmbedder';\nimport ForceDirected from './components/ForceDirected';\nimport SimulatedAnnealing from './components/SimulatedAnnealing';\nimport TabuSearch from './components/TabuSearch';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <h1>Navigation</h1>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Random</Link>\n              </li>\n              <li>\n                <Link to=\"/spring-embedder/\">Spring Embedder</Link>\n              </li>\n              <li>\n                <Link to=\"/force-directed/\">Force Directed</Link>\n              </li>\n              <li>\n                <Link to=\"/simulated-annealing/\">Simulated Annealing</Link>\n              </li>\n              <li>\n                <Link to=\"/tabu-search/\">Tabu Search</Link>\n              </li>\n            </ul>\n          </nav>\n\n          <Route path=\"/\" exact component={RandomGraph} />\n          <Route path=\"/spring-embedder/\" component={SpringEmbedder} />\n          <Route path=\"/force-directed/\" component={ForceDirected} />\n          <Route path=\"/simulated-annealing/\" component={SimulatedAnnealing} />\n          <Route path=\"/tabu-search/\" component={TabuSearch} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}